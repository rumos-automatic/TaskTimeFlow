'use client'

import { useEffect, useState, useCallback, useRef } from 'react'
import { useAuth } from '@/lib/auth/auth-context'
import { useSupabaseCategoryStore } from '@/lib/store/use-supabase-category-store'
import { useCategoryStore as useLocalCategoryStore } from '@/lib/store/use-category-store'
import { CustomCategory, BuiltInCategoryConfig, CategoryFilter } from '@/lib/types'
import { BUILT_IN_CATEGORIES } from '@/lib/store/use-category-store'

export function useCategoryStoreWithAuth() {
  const { user, loading: authLoading } = useAuth()
  const supabaseStore = useSupabaseCategoryStore()
  const localStore = useLocalCategoryStore()
  const [migrationCompleted, setMigrationCompleted] = useState(false)
  const [migrating, setMigrating] = useState(false)
  const [initialized, setInitialized] = useState(false)
  const initializingRef = useRef(false)

  // „É¶„Éº„Ç∂„ÉºID„Éô„Éº„Çπ„Åß„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥ÂÆå‰∫ÜÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
  const checkMigrationStatus = (userId: string): boolean => {
    try {
      const migrationKey = `category_migration_completed_${userId}`
      const status = localStorage.getItem(migrationKey) === 'true'
      console.log(`üì¶ Migration status for user ${userId}:`, status)
      return status
    } catch (error) {
      console.warn('Failed to check category migration status:', error)
      return false
    }
  }

  // „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥ÂÆå‰∫ÜÁä∂ÊÖã„ÇíÊ∞∏Á∂öÂåñ
  const setMigrationStatus = (userId: string, completed: boolean) => {
    try {
      const migrationKey = `category_migration_completed_${userId}`
      if (completed) {
        localStorage.setItem(migrationKey, 'true')
      } else {
        localStorage.removeItem(migrationKey)
      }
      setMigrationCompleted(completed)
    } catch (error) {
      console.warn('Failed to set category migration status:', error)
      setMigrationCompleted(completed)
    }
  }

  // „É≠„Éº„Ç´„É´„Éá„Éº„Çø„ÇíSupabase„Å´ÁßªË°å
  const migrateLocalDataToSupabase = useCallback(async () => {
    if (!user) return

    // Ê∞∏Á∂öÂåñ„Åï„Çå„Åü„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥Áä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    const alreadyMigrated = checkMigrationStatus(user.id)
    if (alreadyMigrated) {
      console.log('üì¶ Category migration already completed for user:', user.id)
      setMigrationCompleted(true)
      return
    }

    console.log('üöÄ Starting category migration for user:', user.id)
    setMigrating(true)

    try {
      // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„Çâ„Ç´„Çπ„Çø„É†„Ç´„ÉÜ„Ç¥„É™„ÇíÂèñÂæó
      const localCustomCategories = localStore.customCategories
      console.log('üì§ Local custom categories to migrate:', localCustomCategories)

      if (localCustomCategories.length > 0) {
        // Êó¢Â≠ò„ÅÆSupabase„Éá„Éº„Çø„ÇíÁ¢∫Ë™ç
        const existingSupabaseCategories = supabaseStore.customCategories
        console.log('üì• Existing Supabase categories:', existingSupabaseCategories)

        // „É≠„Éº„Ç´„É´„Éá„Éº„Çø„ÇíSupabase„Å´ÁßªË°åÔºàÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÔºâ
        for (const localCategory of localCustomCategories) {
          const exists = existingSupabaseCategories.some(
            (existing) => existing.name === localCategory.name && existing.userId === user.id
          )

          if (!exists) {
            console.log('‚ûï Migrating category to Supabase:', localCategory.name)
            await supabaseStore.addCustomCategory({
              ...localCategory,
              userId: user.id
            })
          } else {
            console.log('‚è≠Ô∏è Category already exists in Supabase, skipping:', localCategory.name)
          }
        }

        // ÁßªË°åÂÆå‰∫ÜÂæå„ÄÅ„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Çí„ÇØ„É™„Ç¢
        localStore.setCustomCategories([])
        console.log('üßπ Cleared local custom categories after migration')
      }

      // „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥ÂÆå‰∫Ü„Çí„Éû„Éº„ÇØ
      setMigrationStatus(user.id, true)
      console.log('‚úÖ Category migration completed successfully')

    } catch (error) {
      console.error('‚ùå Category migration failed:', error)
      // „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å¶„ÇÇ„Ç¢„Éó„É™„ÅÆÊ©üËÉΩ„ÅØÁ∂ôÁ∂ö„Åô„Çã
    } finally {
      setMigrating(false)
    }
  }, [user, localStore, supabaseStore])

  // ÂàùÊúüÂåñÂá¶ÁêÜ
  const initializeStores = useCallback(async () => {
    if (!user || authLoading || initialized || initializingRef.current) return

    initializingRef.current = true
    console.log('üîß Initializing category stores for user:', user.id)

    try {
      // Supabase„Çπ„Éà„Ç¢„ÇíÂàùÊúüÂåñ
      await supabaseStore.initialize(user.id)
      
      // „É≠„Éº„Ç´„É´„Çπ„Éà„Ç¢„ÅÆ„É¶„Éº„Ç∂„ÉºË®≠ÂÆö„ÇÇÂàùÊúüÂåñ
      await localStore.initialize(user.id)

      // „Éá„Éº„ÇøÁßªË°å„ÇíÂÆüË°å
      await migrateLocalDataToSupabase()

      setInitialized(true)
      console.log('‚úÖ Category stores initialized successfully')

    } catch (error) {
      console.error('‚ùå Failed to initialize category stores:', error)
    } finally {
      initializingRef.current = false
    }
  }, [user, authLoading, initialized, supabaseStore, localStore, migrateLocalDataToSupabase])

  // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÂá¶ÁêÜ
  const cleanupStores = useCallback(() => {
    console.log('üßπ Cleaning up category stores')
    supabaseStore.cleanup()
    localStore.cleanup()
    setInitialized(false)
    setMigrationCompleted(false)
    setMigrating(false)
    initializingRef.current = false
  }, [supabaseStore, localStore])

  // „É¶„Éº„Ç∂„ÉºÂ§âÊõ¥ÊôÇ„ÅÆÂá¶ÁêÜ
  useEffect(() => {
    if (user) {
      initializeStores()
    } else {
      cleanupStores()
    }

    return () => {
      if (!user) {
        cleanupStores()
      }
    }
  }, [user, initializeStores, cleanupStores])

  // allCategories„ÅÆË®àÁÆó
  const allCategories: (CustomCategory | BuiltInCategoryConfig)[] = [
    ...BUILT_IN_CATEGORIES,
    ...supabaseStore.customCategories.sort((a, b) => a.order - b.order)
  ]

  // Áµ±Âêà„Åï„Çå„Åü„Çπ„Éà„Ç¢Èñ¢Êï∞Áæ§
  return {
    // State
    customCategories: supabaseStore.customCategories,
    allCategories,
    selectedCategory: localStore.selectedCategory,
    googleTasksSync: supabaseStore.googleTasksSync,
    loading: supabaseStore.loading || authLoading,
    syncing: supabaseStore.syncing || migrating,
    error: supabaseStore.error || localStore.error,
    initialized,
    migrationCompleted,

    // Actions
    setSelectedCategory: localStore.setSelectedCategory,

    // Category management (Supabase)
    addCustomCategory: async (categoryData: Omit<CustomCategory, 'id' | 'createdAt' | 'updatedAt' | 'userId'>) => {
      if (!user) throw new Error('User not authenticated')
      
      console.log('üöÄ useCategoryStoreWithAuth.addCustomCategory called with:', categoryData)
      console.log('üîç Migration completed:', migrationCompleted)
      console.log('üîç Initialized:', initialized)
      console.log('üîç User:', user.id)
      
      if (!initialized) {
        console.warn('‚ö†Ô∏è Store not initialized, initializing now...')
        await initializeStores()
      }
      
      return supabaseStore.addCustomCategory({
        ...categoryData,
        userId: user.id
      })
    },

    updateCustomCategory: supabaseStore.updateCustomCategory,
    deleteCustomCategory: supabaseStore.deleteCustomCategory,
    reorderCategories: supabaseStore.reorderCategories,

    // Google Tasks sync
    updateGoogleTasksSync: supabaseStore.updateGoogleTasksSync,

    // Utility functions
    getCategoryById: (id: string) => {
      return allCategories.find(category => category.id === id)
    },

    getCategoryByName: (name: string) => {
      return allCategories.find(category => category.name.toLowerCase() === name.toLowerCase())
    },

    getNextAvailableColor: localStore.getNextAvailableColor,
    getNextAvailableIcon: localStore.getNextAvailableIcon,

    // Migration and cleanup
    resetMigrationStatus: () => {
      if (user) {
        console.log('üîÑ Resetting migration status for user:', user.id)
        setMigrationStatus(user.id, false)
        setInitialized(false)
        setMigrationCompleted(false)
      }
    },

    forceRefresh: async () => {
      if (user && initialized) {
        await supabaseStore.initialize(user.id)
      }
    },

    // Debug helper to fix current state
    debugAndFix: async () => {
      if (!user) return
      
      console.log('üîß Debug and fix category store state...')
      console.log('Current state:', {
        user: user.id,
        initialized,
        migrationCompleted,
        customCategories: supabaseStore.customCategories.length,
        loading: supabaseStore.loading
      })
      
      // Reset migration status and re-initialize
      setMigrationStatus(user.id, false)
      setInitialized(false)
      setMigrationCompleted(false)
      
      // Force re-initialization
      await initializeStores()
    }
  }
}